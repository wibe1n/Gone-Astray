using UnityEngine;using System.Collections;using System.Collections.Generic;public class Sketch : MonoBehaviour{	[Header("Parameters")]	public Material m_MatSketch;	public Color m_SketchColor = Color.black;	public Color m_OutlineColor = Color.black;	[Range(0f, 8f)] public float m_OutlineWidth = 0.2f;	[Range(0f, 1f)] public float m_ExpandFactor = 1f;	[Header("Internal")]	public Renderer m_Rd;	public Material[] m_BackupMaterials;		public void Initialize ()	{		m_Rd = GetComponent<Renderer> ();		// cache all original materials		Material[] mats = m_Rd.materials;		int len = mats.Length;		m_BackupMaterials = new Material[len];		for (int i = 0; i < len; i++)		{			m_BackupMaterials[i] = mats[i];		}	}	public void UpdateSelfParameters ()	{		Material[] mats = m_Rd.materials;		for (int i = 0; i < mats.Length; i++)		{			mats[i].SetColor ("_SketchColor", m_SketchColor);			mats[i].SetColor ("_OutlineColor", m_OutlineColor);			mats[i].SetFloat ("_OutlineWidth", m_OutlineWidth);			mats[i].SetFloat ("_ExpandFactor", m_ExpandFactor);			mats[i].SetTexture ("_MainTex", m_BackupMaterials[i].GetTexture ("_MainTex"));			mats[i].SetTextureOffset ("_MainTex", m_BackupMaterials[i].GetTextureOffset ("_MainTex"));			mats[i].SetTextureScale ("_MainTex", m_BackupMaterials[i].GetTextureScale ("_MainTex"));		}	}	public void SetMaterialsFloat (string name, float f)	{		Material[] mats = m_Rd.materials;		for (int i = 0; i < mats.Length; i++)		{			mats[i].SetFloat (name, f);		}	}	public void SketchEnable ()	{		int len = m_Rd.materials.Length;		Material[] mats = new Material[len];		for (int i = 0; i < len; i++)		{			mats[i] = m_MatSketch;		}		m_Rd.materials = mats;	}	public void SketchDisable ()	{		m_Rd.materials = m_BackupMaterials;	}}